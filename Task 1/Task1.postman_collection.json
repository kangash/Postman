{
	"info": {
		"_postman_id": "12d7272c-f32a-46f7-90ad-310318dea62d",
		"name": "Task1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20321287"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Проверить статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Проверить, что в body приходит правильный string\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Проверить статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Спарсить response body в json\r",
							"let resp = pm.response.json();\r",
							"let resp_name = resp.name;\r",
							"let resp_age = +resp.age;\r",
							"let resp_salary = resp.salary;\r",
							"\r",
							"// 3. Проверить, что name в ответе равно заданному вручную значению \r",
							"pm.test(\"Check name\", function () {\r",
							"        pm.expect(resp_name).to.eql('Anna');\r",
							"});\r",
							"\r",
							"// 4. Проверить, что age в ответе равно заданному вручную значению \r",
							"pm.test(\"Check age\", function () {\r",
							"        pm.expect(resp_age).to.eql(25);\r",
							"});\r",
							"\r",
							"// 5. Проверить, что salary в ответе равно заданному вручную значению \r",
							"pm.test(\"Check salary\", function () {\r",
							"        pm.expect(resp_salary).to.eql(1300);\r",
							"});\r",
							"\r",
							"// 6. Спарсить request\r",
							"let req = request.data;\r",
							"let req_name = req.name;\r",
							"let req_age = +req.age;\r",
							"let req_salary = +req.salary;\r",
							"let req_salary_1_5 = req_salary * 4;\r",
							"\r",
							"// 7. Проверить, что name в ответе равно name (name забрать из request)\r",
							"pm.test(\"Check request name\", function () {\r",
							"        pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 8. Проверить, что age в ответе равно age (age забрать из request)\r",
							"pm.test(\"Check request age\", function () {\r",
							"        pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что salary в ответе равно salary (salary забрать из request)\r",
							"pm.test(\"Check request salary\", function () {\r",
							"        pm.expect(resp.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 10. Вывести в консоль параметр family из response\r",
							"console.log(resp.family);\r",
							"\r",
							"// 11. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check request u_salary_1_5_year\", function () {\r",
							"        pm.expect(resp.family.u_salary_1_5_year).to.eql(req_salary_1_5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1300",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Проверить статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Спарсить response body в json\r",
							"let resp = pm.response.json();\r",
							"let resp_name = resp.name;\r",
							"let resp_age = +resp.age;\r",
							"let resp_salary = resp.salary;\r",
							"\r",
							"// 3. Спарсить request\r",
							"let req = pm.request.url.query.toObject();\r",
							"let req_name = req.name;\r",
							"let req_age = +req.age;\r",
							"let req_salary = +req.salary;\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name (name забрать из request)\r",
							"pm.test(\"Check request name\", function () {\r",
							"        pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age (age забрать из request)\r",
							"pm.test(\"Check request age\", function () {\r",
							"        pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary (salary забрать из request)\r",
							"pm.test(\"Check request salary\", function () {\r",
							"        pm.expect(resp.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр family из response\r",
							"console.log(resp.family);\r",
							"\r",
							"// 8. Проверить, что у параметра dog есть параметр name\r",
							"pm.test(\"Check dog has name\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметр age\r",
							"pm.test(\"Check dog has age\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"// 10. Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"Check dog name\", function () {\r",
							"    pm.expect(resp.family.pets.dog.name).to.have.eql('Luky');\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"Check dog age\", function () {\r",
							"    pm.expect(resp.family.pets.dog.age).to.have.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=John&age=24&salary=1500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "John"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Проверить статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Спарсить response body в json\r",
							"let resp = pm.response.json();\r",
							"let resp_name = resp.name;\r",
							"let resp_age = +resp.age;\r",
							"let resp_salary = resp.salary;\r",
							"let resp_salary_0 = resp.salary[0];\r",
							"let resp_salary_1 = +resp.salary[1];\r",
							"let resp_salary_2 = +resp.salary[2];\r",
							"\r",
							"// 3. Спарсить request\r",
							"let req = pm.request.url.query.toObject();\r",
							"let req_name = req.name;\r",
							"let req_age = +req.age;\r",
							"let req_salary = +req.salary;\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name (name забрать из request)\r",
							"pm.test(\"Check request name\", function () {\r",
							"        pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age (age забрать из request)\r",
							"pm.test(\"Check request age\", function () {\r",
							"        pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 6. Вывести в консоль параметр salary из request\r",
							"console.log(req.salary);\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из response\r",
							"console.log(resp.salary);\r",
							"\r",
							"// 8. Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(resp.salary[0]);\r",
							"\r",
							"// 9. Вывести в консоль 1-й элемент параметра salary из response\r",
							"console.log(resp.salary[1]);\r",
							"\r",
							"// 10. Вывести в консоль 2-й элемент параметра salary из response\r",
							"console.log(resp.salary[2]);\r",
							"\r",
							"// 11. Проверить, что 0-й элемент параметра salary равен salary (salary забрать из request)\r",
							"pm.test(\"Check salary 0 element\", function () {\r",
							"        pm.expect(resp_salary_0).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 12. Проверить, что 1-й элемент параметра salary равен salary*2 (salary забрать из request)\r",
							"pm.test(\"Check salary 1 element\", function () {\r",
							"        pm.expect(resp_salary_1).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 2-й элемент параметра salary равен salary*3 (salary забрать из request)\r",
							"pm.test(\"Check salary 2 element\", function () {\r",
							"        pm.expect(resp_salary_2).to.eql(req_salary*3);\r",
							"});\r",
							"\r",
							"// 14. Написать цикл который выведет в консоль по порядку элементы из параметра salary\r",
							"for (let salary of resp_salary) {\r",
							"    console.log(salary);\r",
							"};\r",
							"\r",
							"// 15. Создать в окружении переменные name, age и salary и передать в них значения из request\r",
							"pm.environment.set(\"name\", req_name);\r",
							"pm.environment.set(\"age\", req_age);\r",
							"pm.environment.set(\"salary\", req_salary);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Rose&age=75&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Rose"
						},
						{
							"key": "age",
							"value": "75"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Использовать параметры name, age и salary из окружения в request\r",
							"\r",
							"// 1. Проверить статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Спарсить response body в json\r",
							"let resp = pm.response.json();\r",
							"\r",
							"// 3. Спарсить request\r",
							"let req = request.data;\r",
							"let req_salary = +req.salary;\r",
							"let req_age = +req.age\r",
							"\r",
							"// 4. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check start_qa_salary parameter\", function () {\r",
							"    pm.expect(resp).to.have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"// 5. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check qa_salary_after_6_months parameter\", function () {\r",
							"    pm.expect(resp).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"// 6. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check qa_salary_after_12_months parameter\", function () {\r",
							"    pm.expect(resp).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"// 7. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check qa_salary_after_1.5_year parameter\", function () {\r",
							"    pm.expect(resp).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check qa_salary_after_3.5_years parameter\", function () {\r",
							"    pm.expect(resp).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check person parameter\", function () {\r",
							"    pm.expect(resp).to.have.property('person');\r",
							"});\r",
							"\r",
							"// 10. Проверить, что параметр start_qa_salary равен salary (salary забрать из request)\r",
							"pm.test(\"Check start_qa_salary\", function () {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"Check qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"pm.test(\"Check qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(req_salary*2.7);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"pm.test(\"Check qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp['qa_salary_after_1.5_year']).to.eql(req_salary*3.3);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"pm.test(\"Check qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp['qa_salary_after_3.5_years']).to.eql(req_salary*3.8);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\r",
							"pm.test(\"Check u_name\", function () {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что что параметр u_age равен age (age забрать из request)\r",
							"pm.test(\"Check u_age\", function () {\r",
							"    pm.expect(resp.person.u_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"pm.test(\"Check u_salary_5_years\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(req_salary*4.2);\r",
							"});\r",
							"\r",
							"// 18. Написать цикл который выведет в консоль по порядку элементы из параметра person\r",
							"Object.entries(resp.person).forEach(([key, value]) => console.log(key, value));\r",
							"for (key in resp.person) {\r",
							"    console.log(key, resp.person[key])\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}